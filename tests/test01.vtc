varnishtest "some tests"

server s1 {
	rxreq
	txresp -hdr "baz: qux" -hdr "baz: another qux" -hdr "beep: boop" -body "9876543210"
	expect req.url == "/my/url"
	expect req.http.foo == "bar"
	expect req.body == "0123456789"
} -start

varnish v1 -vcl+backend {
	import reqwest from "${vmod}";

	sub vcl_init {
		new client = reqwest.client();
	}

	sub vcl_recv {
		client.init("secure", "https://example.com");
		client.send("secure");

		client.init("faulty", "....");

		client.init("s1", "http://${s1_addr}:${s1_port}/my/url");
		client.set_header("s1", "foo", "bar");
		client.set_body("s1", "0123456789");
		return (synth(200));
	}

	sub vcl_synth {
		client.init("regular", "http://example.com");
		set resp.http.regular_status = client.status("regular");
		set resp.http.secure_status = client.status("secure");
		set resp.http.secure_error = client.error("secure");
		set resp.http.faulty_status = client.status("faulty");
		set resp.http.faulty_error = client.error("faulty");
		set resp.http.s1_baz_0 = client.header("s1", "baz");
		set resp.http.s1_baz_1 = client.header("s1", "baz", sep = ", ");
		set resp.http.s1_baz_2 = client.header("s1", "baz", sep = " neat separator ");
		set resp.http.s1_beep_0 = client.header("s1", "beep");
		set resp.http.s1_beep_1 = client.header("s1", "beep", sep = ", ");
		set resp.http.s1_beep_2 = client.header("s1", "beep", sep = " neat separator ");
		set resp.http.s1_none_0 = client.header("s1", "none");
		set resp.http.s1_none_1 = client.header("s1", "none", sep = ", ");
		set resp.http.s1_none_2 = client.header("s1", "none", sep = " neat separator ");
		set resp.http.s1_body = client.body_as_string("s1");
	}
} -start

client c1 {
	txreq
	rxresp
	expect resp.http.secure_status == 200
	expect resp.http.regular_status == 200
	expect resp.http.faulty_status == 0
	expect resp.http.faulty_error == "builder error: relative URL without a base"
	expect resp.http.s1_baz_0 == "qux"
	expect resp.http.s1_baz_1 == "qux, another qux"
	expect resp.http.s1_baz_2 == "qux neat separator another qux"
	expect resp.http.s1_beep_0 == "boop"
	expect resp.http.s1_beep_1 == "boop"
	expect resp.http.s1_beep_2 == "boop"
	expect resp.http.s1_none_0 == ""
	expect resp.http.s1_none_1 == ""
	expect resp.http.s1_none_2 == ""
	expect resp.http.s1_body == "9876543210"
} -run

server s1 -wait
